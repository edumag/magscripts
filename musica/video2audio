#!/bin/bash
# (c) Jochen Puchalla 2006

FLACOPTS="-f -6 --replay-gain"
MPLAYEROPTS="-really-quiet -nolirc -nojoystick -nortc -vo null"

SCRIPT=`basename $0`
CONF="$HOME/config/${SCRIPT}rc"

function names()
{
	filedir=$(dirname "$1") # directory without filename
	filename=$(basename "$1") # name without directory
	shortname=$(echo $filename|sed 's/\.[^\.]*$//g') # delete suffix, version by Dimitrios Lampridis
#	shortname=$(echo $filename|sed 's/\..*$//g') # delete suffix
	tempfile="/tmp/audiokonv${RANDOM}"
	while test -e ${tempfile} ; do tempfile="/tmp/audiokonv${RANDOM}" ; done
	echo -e "\n# Now converting: $1 \n# DISPLAYED REMAINING TIME IS WRONG!\n"
}

function vidtoogg()
{
	names "$1"
	oggname="${shortname}.ogg"

	mkfifo ${tempfile}
	nice -10 mplayer ${MPLAYEROPTS} -ao pcm:file="${tempfile}" "$1" &> /dev/null | nice -10 oggenc ${ifmono} -q ${quality} ${tempfile} -o "${encdir}/${EXTRA}/${oggname}"
	rm -f "${tempfile}"

	# create vorbis comments
	test ! -z "$(which vorbiscomment)" &&
	{
		echo "Writing metadata..."
		vorbiscomment -t "TITLE=${shortname}" -a "${encdir}/${EXTRA}/${oggname}"
		echo "Done."
	}
}

function vidtomp3()
{
	names "$1"
	mp3name="${encdir}/${EXTRA}/${shortname}.mp3"

	mkfifo ${tempfile}
	test ${quality} -gt 9 && nice -10 mplayer ${MPLAYEROPTS} -vo null -ao pcm:file="${tempfile}" "$1" &> /dev/null | nice -10 lame -b ${quality} -h ${tempfile} "${mp3name}"
	test ${quality} -lt 10 && nice -10 mplayer ${MPLAYEROPTS} -vo null -ao pcm:file="${tempfile}" "$1" &> /dev/null | nice -10 lame -v -V ${quality} -h ${tempfile} "${mp3name}"
	rm -f "${tempfile}"

	# get/set metadata:
	test ! -z "$(which id3tag)" &&
	{
		echo "Writing metadata..."
		id3tag --song="${shortname}" "${mp3name}"
		echo "Done."
	}
}

function vidtoflac()
{
	names "$1"
	flacname="${encdir}/${EXTRA}/${shortname}.flac"

	echo -e "\n# Extracting audio...   please wait\n"
	nice -10 mplayer ${MPLAYEROPTS} -ao pcm:file="${tempfile}" "$1" &> /dev/null
	echo -e "\n# Now encoding audio. \n"
	nice -10 flac ${FLACOPTS} -T TITLE="${shortname}" --output-name="${flacname}" "${tempfile}"
	rm -f "${tempfile}"
}

function vidtoaac()
{
	names "$1"
	aacname="${encdir}/${EXTRA}/${shortname}.aac"

	mkfifo ${tempfile}
	nice -10 mplayer ${MPLAYEROPTS} -ao pcm:file="${tempfile}" "$1" &> /dev/null | nice -10 faac -q ${quality} -o "${aacname}" "${tempfile}"
	rm -f "${tempfile}"
}

function vidtoipod()
{
	names "$1"
	m4aname="${encdir}/${EXTRA}/${shortname}.m4a"

	mkfifo ${tempfile}
	nice -10 mplayer ${MPLAYEROPTS} -ao pcm:file="${tempfile}" "$1" &> /dev/null | nice -10 faac -w -q ${quality} -o "${m4aname}" "${tempfile}"
	rm -f "${tempfile}"
}

function vidtowav()
{
	names "$1"
	wavname="${encdir}/${EXTRA}/${shortname}.wav"

	echo "Extracting $1 to $wavname..."
	nice -10 mplayer ${MPLAYEROPTS} -ao pcm:file="${wavname}" "$1" &> /dev/null
}


###################################### MAIN

test -z "$1" && echo "Use  movie2sound -h  for help" && exit 1

until [ -f "$1" ] || [ -d "$1" ]
do
        case "$1" in
                -t) shift;
                    enctype="$1";;
                -h) echo -e "\nusage:\n
movie2sound -q 64 -t m file  for 64kBit MP3
movie2sound -q 1  -t m file  for high-quality VBR MP3
movie2sound -q 4  -t o file  for mid-quality OGG
movie2sound -q 80 -t a file  for mid-quality AAC
movie2sound -q 80 -t i file  for mid-quality M4A for iPod
movie2sound       -t w file  for WAV
movie2sound       -t f file  for FLAC\n";exit;;
                -q) shift;
                    quality="$1";;
#                -m) shift;
#                    mono="$1";;
                *) ## Assume this is a file
                    ## Prompt for any missing options
                    ## or use default values
                    ## do makeogg or makemp3 as appropriate

                        ;;
        esac
        shift
done


# Select destination directory, use last selected
#decdir=$HOME
#encdir=$HOME
MQUAL=128
OQUAL=4
AQUAL=80
# source "$(kde-config --localprefix)/share/config/kwerc"
source "$CONF"
test -z $encdir && encdir=$HOME
test -z $decdir && decdir=$HOME
# encdir=$(kdialog --title "Where shall I write the new file(s)?" --getexistingdirectory $encdir)
encdir=$(zenity --file-selection --title "Donde guardamos los archivos" --directory $encdir)
while test ! -w "$encdir"
do
	zenity --error --text "No tienes permisos para escribir en este directorio"
   encdir=$(zenity --file-selection --title "Donde guardamos los archivos" --directory $encdir)
done
# Save directories
echo "encdir=${encdir}" > $CONF
echo "decdir=${decdir}" >> $CONF
echo "MQUAL=${MQUAL}" >> $CONF
echo "AQUAL=${AQUAL}" >> $CONF
echo "OQUAL=${OQUAL}" >> $CONF

if [ -z $enctype ]
   then enctype=$(zenity --title 'Convertir audio a' --list --hide-column=1 --column ' ' --column "Formato" m mp3 o OGG a AAC i M4A f FLAC w WAV 2> /dev/null)
fi


if [ -z $quality ]
then
	if [ $enctype = "m" ]
	then
      quality=$(zenity --title "$SCRIPT" --list --text 'Seleciona calidad del audio' --column="Bitrate or VBR quality" $MQUAL 32 40 48 56 64 80 96 112 128 160 192 224 256 320 9 8 7 6 5 4 3 2 1 0 2> /dev/null)	
		test -z "$quality" && exit
		echo "MQUAL=${quality}" >> $CONF
		zenity --title  "$SCRIPT" --question --text "¿Estereo si lo hay?" 2> /dev/null
		notmono=$?
		if [ "${notmono}" = "1" ]   # 1 means no
		then ifmono="-a"
		fi
	fi

	if [ $enctype = "o" ]
	then
		quality=$(zenity --title "$SCRIPT" --list --text 'Calidad' --column=Quality $OQUAL 0 1 2 3 4 5 6 7 8 9 10 2> /dev/null)
		test -z "$quality" && exit
		echo "OQUAL=${quality}" >> $CONF
		zenity --title  "$SCRIPT" --question --text "¿Estereo si lo hay?" 2> /dev/null
		notmono=$?
		if [ "${notmono}" = "1" ]   # 1 means no
		then ifmono="--downmix"
		fi
	fi

	if [ $enctype = "a" ] || [ $enctype = "i" ]
	then
      quality=$(zenity --title "$SCRIPT" --list --text 'Calidad' --column=Quality $AQUAL 30 50 80 120 180 270 400  2> /dev/null)
		test -z "$quality" && exit
		echo "AQUAL=${quality}" >> $CONF
	fi
fi

until [ -z "$1" ]  # Until all parameters are used up...
do
	if [ -f "$1" ] # ALL FILES
	then
		export EXTRA="" # do not create destination directory

		case "$enctype" in
			m) vidtomp3 "$1";;
			o) vidtoogg "$1";;
			a) vidtoaac "$1";;
			i) vidtoipod "$1";;
			f) vidtoflac "$1";;
			w) vidtowav "$1";;
			*) ;;
		esac
	fi

shift
done


zenity --title "$SCRIPT" --info --text "Conversión acabada"

